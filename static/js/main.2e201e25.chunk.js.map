{"version":3,"sources":["components/From.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","inputText","setInputText","todos","setTodos","setStatus","value","onChange","e","console","log","target","type","className","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","key","App","useState","status","setFilteredTodos","useEffect","getTodos","filterHandler","saveTodos","localStorage","getItem","setItem","JSON","stringify","localTodo","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2e201e25.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Form = ({inputText, setInputText, todos, setTodos, setStatus}) => {\r\n    const inputTextHandler = (e) => {\r\n        console.log(e.target.value);\r\n        setInputText(e.target.value);\r\n    }; \r\n    const submitTodoHandler = (e) =>{\r\n        e.preventDefault();\r\n        setTodos([\r\n            ...todos, \r\n            {text: inputText, completed: false, id: Math.random()*1000},\r\n        ]);\r\n        setInputText(\"\");\r\n    };\r\n    const statusHandler = (e) => {\r\n         setStatus(e.target.value);\r\n    };\r\n    return(\r\n        <form>\r\n            <input \r\n                value={inputText}\r\n                onChange={inputTextHandler} \r\n                type=\"text\" \r\n                className=\"todo-input\" \r\n            />\r\n            <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\r\n                <i className=\"fas fa-plus-square\"></i>\r\n            </button>\r\n            <div className=\"select\">\r\n                <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\r\n                    <option value=\"all\">All</option>\r\n                    <option value=\"completed\">Completed</option>\r\n                    <option value=\"uncompleted\">Uncompleted</option>\r\n                </select>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form;\r\n\r\n","import React from \"react\";\r\n\r\nconst Todo = ({ text, todo, todos, setTodos }) => {\r\n    const deleteHandler = () => {\r\n        setTodos(todos.filter((el) => el.id !== todo.id));\r\n    };\r\n\r\n    const completeHandler = () => {\r\n        setTodos(todos.map((item) => {\r\n            if(item.id === todo.id){\r\n                return {\r\n                    ...item, completed: !item.completed,\r\n                }\r\n                \r\n            }\r\n            return item\r\n        }));\r\n    };\r\n    \r\n    return(\r\n        <div className = \"todo\">\r\n            <li className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}>{text}</li>\r\n            <button onClick={completeHandler} className=\"complete-btn\">\r\n                <i className=\"fas fa-check\"></i>\r\n            </button>\r\n            <button onClick={deleteHandler} className=\"trash-btn\">\r\n                <i className=\"fas fa-trash\"></i>\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Todo;","import React from \"react\";\r\nimport Todo from './Todo';\r\n\r\nconst TodoList = ({ todos, setTodos, filteredTodos }) =>{\r\n    return(\r\n        <div className = \"todo-container\">\r\n            <ul className = \"todo-list\">\r\n                {filteredTodos.map((todo) => (\r\n                    <Todo \r\n                        setTodos={setTodos}\r\n                        todos={todos} \r\n                        key={todo.id} \r\n                        todo={todo}\r\n                        text={todo.text}\r\n                    />\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoList","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Form from \"./components/From\"\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState(\"all\");\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n  useEffect(() => {\n    getTodos();\n  }, []);\n\n  useEffect(() => {\n    filterHandler();\n    saveTodos();\n  }, [todos, status]);\n\n  const filterHandler = () => {\n    switch (status) {\n      case 'completed':\n        setFilteredTodos(todos.filter((todo) => todo.completed === true));\n        break;\n      case 'uncompleted':\n        setFilteredTodos(todos.filter((todo) => todo.completed === false));\n        break;\n      default:\n        setFilteredTodos(todos);\n        break;\n    }\n  };\n\n  const getTodos = () => {\n    if(localStorage.getItem(\"todos\") === null){\n      localStorage.setItem(\"todos\", JSON.stringify([]));\n    }else{\n      let localTodo = JSON.parse(localStorage.getItem(\"todos\"));\n      setTodos(localTodo);\n    }\n  };\n\n  const saveTodos = () => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Jay's Todo List</h1> \n      </header>\n      <Form \n        inputText= {inputText} \n        todos={todos} \n        setTodos={setTodos} \n        setInputText={setInputText}\n        setStatus = {setStatus}\n      />\n      <TodoList \n        setTodos={setTodos}\n        todos={todos} \n        filteredTodos = {filteredTodos}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}